
1 - mvn clean package
2 - mvn package dockerfile:build

3 - LAYERED JARS
    To extract the layers of our microservice, letâ€™s
                  execute the following steps:

    3.1 - Add the layer configuration into the pom.xml file

        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <configuration>
                <layers>
                    <enabled>true</enabled>
                </layers>
            </configuration>
        </plugin>

    3.2 - Package the application
        mvn clean package

    3.3 - Execute the jarmode system property with the layertools JAR mode
        java -Djarmode=layertools -jar target/licensing-service-0.0.1-SNAPSHOT.jar list

    3.4 - Create the Dockerfile
        FROM openjdk:11-slim as build
        WORKDIR application
        ARG JAR_FILE=target/*.jar
        COPY ${JAR_FILE} application.jar
        RUN java -Djarmode=layertools -jar application.jar extract
        FROM openjdk:11-slim
        WORKDIR application
        COPY --from=build application/dependencies/ ./
        COPY --from=build application/spring-boot-loader/ ./
        COPY --from=build application/snapshot-dependencies/ ./
        COPY --from=build application/application/ ./
        ENTRYPOINT ["java", "org.springframework.boot.loader.JarLauncher"]

    3.5 - Build and run the image
        docker build . --tag licensing-service
        docker run -it -p8080:8080 licensing-service:latest

        mvn package dockerfile:build

        mvn spring-boot:run

java -Dspring.cloud.config.uri=http://localhost:8071 \
-Dspring.profiles.active=dev \
-jar target/licensing-service-0.0.1-SNAPSHOT.jar

COMMIT A CONTAINER
    docker ps
    docker commit <ID-IMAGEM>  svendowideit/testimage:version3

#DOCKER

    docker run...
    docker ps (containers running)
    docker images (to get all images was created)

#DOCKER COMPOSE COMMANDS
    docker-compose up



